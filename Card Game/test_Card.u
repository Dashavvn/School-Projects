#include "Card.h"

/** @file test_Card.u
  * @author Don Blaheta
  * @version 27 Mar 2019 */

test suite Card
{
  fixture:
    Card aceS = Card{1, 'S'};
    Card fiveD = Card{5, 'D'};
    Card tenH = Card{10, 'H'};
    Card jackC = Card{11, 'C'};
    Card queenH = Card{12, 'H'};
    Card kingD = Card{13, 'D'};

  tests:
    test get
    {
      check ( jackC.getRank() ) expect == 11;
      check ( jackC.getSuit() ) expect == 'C';
      check ( kingD.getRank() ) expect == 13;
      check ( kingD.getSuit() ) expect == 'D';
    }

    test isEqualTo
    {
      Card jackD{11, 'D'};
      check ( tenH.isEqualTo(tenH) ) expect true;
      check ( tenH.isEqualTo(Card{10,'H'}) ) expect true;
      check ( tenH.isEqualTo(fiveD) ) expect false;
      check ( fiveD.isEqualTo(Card{11,'D'}) ) expect false;
      check ( jackC.isEqualTo(Card{11,'D'}) ) expect false;
    }

    test stringConstructor
    {
      check ( Card{"AS"}.isEqualTo(aceS) ) expect true;
      check ( Card{"5D"}.isEqualTo(fiveD) ) expect true;
      check ( Card{"TH"}.isEqualTo(tenH) ) expect true;
      check ( Card{"JC"}.isEqualTo(jackC) ) expect true;
      check ( Card{"QH"}.isEqualTo(queenH) ) expect true;
      check ( Card{"KD"}.isEqualTo(kingD) ) expect true;
    }

    test toString
    {
      check ( aceS.toString() ) expect == "AS";
      check ( fiveD.toString() ) expect == "5D";
      check ( tenH.toString() ) expect == "TH";
      check ( jackC.toString() ) expect == "JC";
      check ( queenH.toString() ) expect == "QH";
      check ( kingD.toString() ) expect == "KD";
    }

test ostream
{
ostringstream testout;
testout << queenH << " " << jackC;
check (testout.str()) expect == "QH JC";
}

};
